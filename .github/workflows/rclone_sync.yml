name: s3 bucket Sync

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  douban:
    name: s3 bucket Sync 
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Setup Rclone
    - name: Setup Rclone
      uses: AnimMouse/setup-rclone@v1
      with:
        rclone_config: ${{ secrets.RCLONE_CONFIG }}

    # Ready to Upload
    - name: Remove Ignore files
      run: |
        rm .git -rf
        rm .github -rf

    # Generate .actioninfo file
    - name: Generate .actioninfo file
      run: |
        output_file=".actioninfo"
        > "$output_file"
        find . -type f | while read -r file; do
          md5=$(md5sum "$file" | awk '{print $1}')
          echo "\"$file\": {\"ContentMD5\": \"$md5\"}," >> "$output_file"
        done
        sed -i '$ s/,$//' "$output_file"
        echo "{" > temp_file
        cat "$output_file" >> temp_file
        echo "}" >> temp_file
        mv temp_file "$output_file"

    # Download .actioninfo file from target directory
    - name: Download .actioninfo file from target directory
      run: rclone copy TencentCN:${{ secrets.COS_CDN_CN_BUCKET }}/.actioninfo .actioninfo_remote || true
      env:
        RCLONE_CONFIG_PASS: ${{ secrets.RCLONE_CONFIG_PASS }}

    # Check if .actioninfo_remote exists
    - name: Check if .actioninfo_remote exists
      id: check_remote_actioninfo
      run: |
        if [ -f .actioninfo_remote ]; then
          echo "REMOTE_ACTIONINFO_EXISTS=true" >> $GITHUB_ENV
        else
          echo "REMOTE_ACTIONINFO_EXISTS=false" >> $GITHUB_ENV
        fi

    # Compare .actioninfo files if .actioninfo_remote exists
    - name: Compare .actioninfo files
      if: env.REMOTE_ACTIONINFO_EXISTS == 'true'
      run: |
        local_actioninfo=".actioninfo"
        remote_actioninfo=".actioninfo_remote"
        diff <(jq -S . "$local_actioninfo") <(jq -S . "$remote_actioninfo") | grep -E '^>|^\<' | awk -F'"' '{print $2}' > changed_files.txt
        diff <(jq -S . "$remote_actioninfo") <(jq -S . "$local_actioninfo") | grep -E '^>|^\<' | awk -F'"' '{print $2}' > deleted_files.txt

    # Rclone Sync to Tencent Cloud COS
    - name: Rclone Sync to COS
      run: |
        source_path="."
        target_path_cos="TencentCN:${{ secrets.COS_CDN_CN_BUCKET }}"
        target_path_oss="AliyunOSS:${{ secrets.OSS_CN_BUCKET }}"
        target_path_r2="Cloudflare:${{ secrets.CF_R2_BUCKET }}"
        if [ -f changed_files.txt ]; then
          changed_files=$(cat changed_files.txt)
          for file in $changed_files; do
            rclone sync "$source_path/$file" "$target_path_cos/$file"
            rclone sync "$source_path/$file" "$target_path_oss/$file"
            rclone sync "$source_path/$file" "$target_path_r2/$file"
          done
        fi
        if [ -f deleted_files.txt ]; then
          deleted_files=$(cat deleted_files.txt)
          for file in $deleted_files; do
            rclone delete "$target_path_cos/$file"
            rclone delete "$target_path_oss/$file"
            rclone delete "$target_path_r2/$file"
          done
        else
          rclone sync "$source_path" "$target_path_cos" --exclude=.git/** --exclude=.github/** --exclude=README.md
          rclone sync "$source_path" "$target_path_oss" --exclude=.git/** --exclude=.github/** --exclude=README.md
          rclone sync "$source_path" "$target_path_r2" --exclude=.git/** --exclude=.github/** --exclude=README.md
        fi
      env:
        RCLONE_CONFIG_PASS: ${{ secrets.RCLONE_CONFIG_PASS }}

    # Upload .actioninfo file to target directory
    - name: Upload .actioninfo file to target directory
      run: rclone copy .actioninfo TencentCN:${{ secrets.COS_CDN_CN_BUCKET }}
      env:
        RCLONE_CONFIG_PASS: ${{ secrets.RCLONE_CONFIG_PASS }}